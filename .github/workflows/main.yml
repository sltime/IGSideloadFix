name: Build IGSideloadFix (arm64 Sideload / Unsigned)

on:
  workflow_dispatch:
    inputs:
      decrypted_ipa_url:
        description: "Direct URL of decrypted Instagram IPA"
        required: true
      rocket_zip_url:
        description: "Direct URL of Rocket.zip → extracts to Rocket.dylib + Rocket.bundle"
        required: true
      sign_ipa:
        description: "Sign the IPA? (uncheck for unsigned)"
        type: boolean
        default: true

jobs:
  build:
    runs-on: macos-latest
    timeout-minutes: 45

    env:
      THEOS: ${{ github.workspace }}/theos
      THEOS_JAILED: ${{ github.workspace }}/theos-jailed
      THEOS_MAKE_PATH: ${{ github.workspace }}/theos/makefiles

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Select Xcode 16.1
        run: sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer

      - name: Install dependencies
        shell: bash
        run: |
          echo "Installing minimal dependencies..."
          brew update --quiet
          for pkg in make llvm ldid wget unzip plutil git perl; do
            if ! command -v $pkg >/dev/null 2>&1; then
              echo "Installing $pkg..."
              brew install $pkg
            else
              echo "$pkg already installed, skipping."
            fi
          done
          echo "$(brew --prefix make)/libexec/gnubin" >> "$GITHUB_PATH"
          echo "$(brew --prefix llvm)/bin" >> "$GITHUB_PATH"

      # ------------------- THEOS -------------------
      - name: Clone Theos
        run: git clone --recursive --depth 1 https://github.com/theos/theos.git "$THEOS"

      # ------------------- THEOS-JAILED (kabiroberai fork – supports Hackogram_INJECT_DYLIBS) -------------------
      - name: Clone theos-jailed (kabiroberai)
        run: git clone --recursive --depth 1 https://github.com/kabiroberai/theos-jailed.git "$THEOS_JAILED"

      - name: Install theos-jailed
        run: |
          cd "$THEOS_JAILED"
          ./install

      # ------------------- Instagram IPA -------------------
      - name: Download & extract Instagram IPA
        shell: bash
        run: |
          echo "Downloading decrypted Instagram IPA..."
          wget -q "${{ inputs.decrypted_ipa_url }}" -O Instagram.ipa
          unzip -q Instagram.ipa -d tmp_ipa
          IG_VERSION=$(plutil -extract CFBundleShortVersionString raw tmp_ipa/Payload/Instagram.app/Info.plist)
          echo "IG_VERSION=$IG_VERSION" >> "$GITHUB_ENV"
          echo "Detected Instagram v$IG_VERSION"

      # ------------------- ROBUST ROCKET ZIP HANDLING -------------------
      - name: Download & extract Rocket.zip (robust)
        shell: bash
        run: |
          set -euo pipefail
          echo "Preparing Rocket.zip download..."

          ROCKET_INPUT="${{ inputs.rocket_zip_url }}"
          if echo "$ROCKET_INPUT" | grep -qi "dropbox.com"; then
            if echo "$ROCKET_INPUT" | grep -q "dl="; then
              ROCKET_URL="$(echo "$ROCKET_INPUT" | sed -E 's/dl=[01]/dl=1/g')"
            else
              ROCKET_URL="${ROCKET_INPUT}?dl=1"
            fi
          else
            ROCKET_URL="$ROCKET_INPUT"
          fi

          echo "Using Rocket URL: $ROCKET_URL"
          wget -q "$ROCKET_URL" -O rocket.zip

          rm -rf rocket_tmp
          mkdir -p rocket_tmp
          unzip -q rocket.zip -d rocket_tmp

          ROCKET_DYLIB=$(find rocket_tmp -type f \( -iname 'Rocket.dylib' -o -iname '*rocket*.dylib' \) | head -n1 || true)
          if [ -z "$ROCKET_DYLIB" ]; then
            echo "Error: Rocket.dylib not found. Listing contents:"
            find rocket_tmp -maxdepth 3 -type f -print
            exit 1
          fi

          ROCKET_BUNDLE_DIR=$(find rocket_tmp -type d -iname 'Rocket.bundle' | head -n1 || true)

          cp "$ROCKET_DYLIB" ./Rocket.dylib
          if [ -n "$ROCKET_BUNDLE_DIR" ]; then
            mkdir -p Resources
            cp -R "$ROCKET_BUNDLE_DIR" Resources/Rocket.bundle
          fi

          rm -rf rocket_tmp rocket.zip
          echo "Rocket payload ready."

      # ------------------- PATCH ROCKET -------------------
      - name: Patch Rocket.dylib (mov x0, #1 ; ret)
        shell: bash
        run: |
          set -euo pipefail
          printf '\x20\x00\x80\xd2\xc0\x03\x5f\xd6' | dd of=Rocket.dylib bs=1 seek=$((0x5E30)) conv=notrunc 2>/dev/null
          echo "Patched Rocket.dylib at offset 0x5E30"

      # ------------------- THEOS LAYOUT -------------------
      - name: Prepare Theos layout
        shell: bash
        run: |
          mkdir -p layout/Applications/Instagram.app/Frameworks
          cp -R tmp_ipa/Payload/Instagram.app/* layout/Applications/Instagram.app/
          cp Rocket.dylib layout/Applications/Instagram.app/Frameworks/
          [ -d Resources/Rocket.bundle ] && cp -R Resources/Rocket.bundle layout/Applications/Instagram.app/ || true
          echo "Layout ready."

      # ------------------- MAKEFILE (jailed IPA build) -------------------
      - name: Generate Makefile (jailed IPA mode)
        shell: bash
        run: |
          cat > Makefile <<'EOF'
          include $(THEOS)/makefiles/common.mk

          THEOS_PACKAGE_SCHEME = jailed
          THEOS_PLATFORM_DEB_COMPRESSION = none

          APPLICATION_NAME = Instagram

          # Explicitly tell Theos which binary to link
          Instagram_BINARY = Instagram

          Instagram_FRAMEWORKS = UIKit Foundation

          ARCHS = arm64
          TARGET = iphone:clang:latest:14.0

          Instagram_INSTALL_PATH = /Applications

          # Original author’s injection variable
          Hackogram_INJECT_DYLIBS = Rocket.dylib

          include $(THEOS_MAKE_PATH)/aggregate.mk
          include $(THEOS_MAKE_PATH)/application.mk

          # Fix load path + re-sign binary
          after-stage::
              $(ECHO_NOTHING)install_name_tool -change \
                  @rpath/Rocket.dylib @executable_path/../Frameworks/Rocket.dylib \
                  $(THEOS_STAGING_DIR)/Applications/Instagram.app/Instagram$(ECHO_END)
              $(ECHO_NOTHING)ldid -S$(THEOS_STAGING_DIR)/Applications/Instagram.app/Instagram$(ECHO_END)

          FINALPACKAGE = 1
          EOF

          perl -pi -e 's/^\s+/	/' Makefile
          echo "Makefile generated (jailed IPA mode)"

      # ------------------- BUILD IPA -------------------
      - name: Build IPA
        shell: bash
        run: |
          echo "Building IPA (sign_ipa=${{ inputs.sign_ipa }})..."
          if [ "${{ inputs.sign_ipa }}" = "false" ]; then
            make clean package FINALPACKAGE=1 CODESIGN_IPA=0
          else
            make clean package FINALPACKAGE=1
          fi

      # ------------------- RENAME & UPLOAD -------------------
      - name: Rename IPA
        shell: bash
        run: |
          IPA=$(find packages -name "*.ipa" -type f | head -n1)
          [ -z "$IPA" ] && { echo "Error: No .ipa found in packages/!"; exit 1; }

          SUFFIX=$( [ "${{ inputs.sign_ipa }}" = "false" ] && echo "-unsigned" || echo "" )
          NEW_NAME="IGSideloadFix-Instagram-${{ env.IG_VERSION }}$SUFFIX.ipa"
          mv "$IPA" "$NEW_NAME"
          echo "Built: $NEW_NAME"

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: IGSideloadFix-Instagram-${{ env.IG_VERSION }}${{ inputs.sign_ipa == false && '-unsigned' || '' }}
          path: IGSideloadFix-Instagram-${{ env.IG_VERSION }}${{ inputs.sign_ipa == false && '-unsigned' || '' }}.ipa
          retention-days: 7
