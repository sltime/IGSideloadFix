name: Build IGSideloadFix (arm64 Sideload / Unsigned)

on:
  workflow_dispatch:
    inputs:
      decrypted_ipa_url:
        description: "Direct URL of decrypted Instagram IPA"
        required: true
      rocket_zip_url:
        description: "Direct URL of Rocket.zip â†’ extracts to Rocket.dylib + Rocket.bundle"
        required: true
      sign_ipa:
        description: "Sign the IPA? (uncheck for unsigned)"
        type: boolean
        default: true

jobs:
  build:
    runs-on: macos-latest
    timeout-minutes: 45

    env:
      THEOS: ${{ github.workspace }}/theos
      THEOS_JAILED: ${{ github.workspace }}/theos-jailed
      THEOS_MAKE_PATH: ${{ github.workspace }}/theos/makefiles

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Select Xcode 16.1
        run: sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer

      - name: Install dependencies (skip if already installed)
        shell: bash
        run: |
          echo "Installing minimal dependencies..."
          brew update --quiet
          for pkg in make llvm ldid wget unzip plutil git perl; do
            if ! command -v $pkg >/dev/null 2>&1; then
              echo "Installing $pkg..."
              brew install $pkg
            else
              echo "$pkg already installed, skipping."
            fi
          done
          echo "$(brew --prefix make)/libexec/gnubin" >> "$GITHUB_PATH"
          echo "$(brew --prefix llvm)/bin" >> "$GITHUB_PATH"

      - name: Clone Theos
        run: git clone --recursive --depth 1 https://github.com/theos/theos.git "$THEOS"

      - name: Clone theos-jailed
        run: git clone --recursive --depth 1 https://github.com/opa334/theos-jailed.git "$THEOS_JAILED"

      - name: Install theos-jailed
        run: |
          cd "$THEOS_JAILED"
          ./install

      - name: Download & extract Instagram IPA
        shell: bash
        run: |
          echo "Downloading decrypted Instagram IPA..."
          wget -q "${{ inputs.decrypted_ipa_url }}" -O Instagram.ipa
          unzip -q Instagram.ipa -d tmp_ipa
          IG_VERSION=$(plutil -extract CFBundleShortVersionString raw tmp_ipa/Payload/Instagram.app/Info.plist)
          echo "IG_VERSION=$IG_VERSION" >> "$GITHUB_ENV"
          echo "Detected Instagram v$IG_VERSION"

      # ------------------- ROBUST ROCKET ZIP HANDLING -------------------
      - name: Download & extract Rocket.zip (robust)
        shell: bash
        run: |
          set -euo pipefail
          echo "Preparing Rocket.zip download..."

          # Use the workflow input (raw string)
          ROCKET_INPUT="${{ inputs.rocket_zip_url }}"

          # If it's a Dropbox share, ensure dl=1 (force direct download)
          if echo "$ROCKET_INPUT" | grep -qi "dropbox.com"; then
            # replace dl=0 with dl=1, or append ?dl=1 if no query part
            if echo "$ROCKET_INPUT" | grep -q "dl="; then
              ROCKET_URL="$(echo "$ROCKET_INPUT" | sed -E 's/dl=[01]/dl=1/g')"
            else
              ROCKET_URL="${ROCKET_INPUT}?dl=1"
            fi
          else
            ROCKET_URL="$ROCKET_INPUT"
          fi

          echo "Using Rocket URL: ${ROCKET_URL}"
          wget -q "$ROCKET_URL" -O rocket.zip

          # Extract quietly
          rm -rf rocket_tmp
          mkdir -p rocket_tmp
          unzip -q rocket.zip -d rocket_tmp

          # Find Rocket.dylib (case-insensitive), try several fallbacks
          ROCKET_DYLIB=$(find rocket_tmp -type f \( -iname 'Rocket.dylib' -o -iname '*rocket*.dylib' \) | head -n1 || true)
          if [ -z "$ROCKET_DYLIB" ]; then
            echo "Rocket.dylib not found with primary patterns; listing contents for debugging:"
            find rocket_tmp -maxdepth 3 -type f -print | sed -n '1,200p'
            echo "Error: Rocket.dylib not found inside the ZIP. Exiting."
            exit 1
          fi

          echo "Found Rocket.dylib at: $ROCKET_DYLIB"

          # Find Rocket.bundle (case-insensitive)
          ROCKET_BUNDLE_DIR=$(find rocket_tmp -type d -iname 'Rocket.bundle' | head -n1 || true)
          if [ -n "$ROCKET_BUNDLE_DIR" ]; then
            echo "Found Rocket.bundle at: $ROCKET_BUNDLE_DIR"
          else
            echo "No Rocket.bundle found inside the ZIP (that's OK if you only provided dylib)."
          fi

          # Copy to repo locations expected by the build
          mkdir -p Resources
          cp "$ROCKET_DYLIB" ./Rocket.dylib
          echo "Copied Rocket.dylib -> ./Rocket.dylib"

          if [ -n "$ROCKET_BUNDLE_DIR" ]; then
            mkdir -p Resources
            rm -rf Resources/Rocket.bundle
            cp -R "$ROCKET_BUNDLE_DIR" Resources/Rocket.bundle
            echo "Copied Rocket.bundle -> Resources/Rocket.bundle"
          fi

          # Clean temporary files
          rm -rf rocket_tmp rocket.zip
          echo "Rocket payload prepared."

      # ------------------- PATCH ROCKET -------------------
      - name: Patch Rocket.dylib (mov x0, #1 ; ret)
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f Rocket.dylib ]; then
            echo "Rocket.dylib missing, cannot patch."
            exit 1
          fi
          # patch bytes at offset (adjust offset if your offset differs)
          printf '\x20\x00\x80\xd2\xc0\x03\x5f\xd6' | dd of=Rocket.dylib bs=1 seek=$((0x5E30)) conv=notrunc 2>/dev/null
          echo "Patched Rocket.dylib at offset 0x5E30"

      - name: Prepare Theos layout
        shell: bash
        run: |
          mkdir -p layout/Applications/Instagram.app/Frameworks
          cp -R tmp_ipa/Payload/Instagram.app/* layout/Applications/Instagram.app/
          cp Rocket.dylib layout/Applications/Instagram.app/Frameworks/
          [ -d Resources/Rocket.bundle ] && cp -R Resources/Rocket.bundle layout/Applications/Instagram.app/ || true
          echo "Theos layout prepared (Info.plist copied)."

      - name: Generate Makefile (arm64-only tweak)
        shell: bash
        run: |
          cat > Makefile <<'EOF'
          ARCHS = arm64
          TARGET = iphone:clang:latest:14.0
          include $(THEOS)/makefiles/common.mk

          TWEAK_NAME = Hackogram
          Hackogram_FILES = $(wildcard *.x)
          Hackogram_FRAMEWORKS = UIKit Foundation
          Hackogram_INJECT_DYLIBS = Rocket.dylib
          Hackogram_BUNDLE_NAME = Instagram
          Hackogram_INSTALL_PATH = /Applications/Instagram.app

          include $(THEOS_MAKE_PATH)/tweak.mk
          EOF

          # Convert leading spaces to tabs (Theos needs tabs in some places)
          perl -pi -e 's/^\s+/	/' Makefile
          echo "Makefile generated (arch=arm64)."

      - name: Build IPA
        shell: bash
        run: |
          echo "Building Hackogram (sign_ipa=${{ inputs.sign_ipa }})..."
          if [ "${{ inputs.sign_ipa }}" = "false" ]; then
            make clean package FINALPACKAGE=1 CODESIGN_IPA=0
          else
            make clean package FINALPACKAGE=1
          fi

      - name: Rename IPA
        shell: bash
        run: |
          IPA=$(find packages -name "*.ipa" | head -n1 || true)
          if [ -z "$IPA" ]; then
            echo "Error: IPA not found!"
            exit 1
          fi
          if [ "${{ inputs.sign_ipa }}" = "false" ]; then
            SUFFIX="-unsigned"
          else
            SUFFIX=""
          fi
          NEW_NAME="IGSideloadFix-Instagram-${{ env.IG_VERSION }}${SUFFIX}.ipa"
          mv "$IPA" "$NEW_NAME"
          echo "Built IPA: $NEW_NAME"

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: IGSideloadFix-Instagram-${{ env.IG_VERSION }}${{ inputs.sign_ipa == false && '-unsigned' || '' }}
          path: IGSideloadFix-Instagram-${{ env.IG_VERSION }}${{ inputs.sign_ipa == false && '-unsigned' || '' }}.ipa
          retention-days: 7
