name: Build IGSideloadFix (arm64 Sideload / Unsigned)

on:
  workflow_dispatch:
    inputs:
      decrypted_ipa_url:
        description: "Direct URL of decrypted Instagram IPA"
        required: true
      rocket_zip_url:
        description: "Direct URL of Rocket.zip â†’ extracts to Rocket.dylib + Rocket.bundle"
        required: true
      sign_ipa:
        description: "Sign the IPA? (uncheck for unsigned)"
        type: boolean
        default: true

jobs:
  build:
    runs-on: macos-latest
    timeout-minutes: 45

    env:
      THEOS: ${{ github.workspace }}/theos
      THEOS_JAILED: ${{ github.workspace }}/theos-jailed
      THEOS_MAKE_PATH: ${{ github.workspace }}/theos/makefiles

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Select Xcode 16.1
        run: sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer

      - name: Install dependencies
        shell: bash
        run: |
          brew update --quiet
          for pkg in make llvm ldid wget unzip plutil git perl; do
            if ! command -v $pkg >/dev/null 2>&1; then
              brew install $pkg
            fi
          done
          echo "$(brew --prefix make)/libexec/gnubin" >> "$GITHUB_PATH"
          echo "$(brew --prefix llvm)/bin" >> "$GITHUB_PATH"

      # ------------------- THEOS -------------------
      - name: Clone Theos
        run: git clone --recursive --depth 1 https://github.com/theos/theos.git "$THEOS"

      # ------------------- THEOS-JAILED -------------------
      - name: Clone theos-jailed (kabiroberai)
        run: git clone --recursive --depth 1 https://github.com/kabiroberai/theos-jailed.git "$THEOS_JAILED"

      - name: Install theos-jailed + SDK symlink
        run: |
          cd "$THEOS_JAILED"
          ./install
          mkdir -p "$THEOS/sdks"
          ln -sf "$THEOS_JAILED/sdks/iPhoneOS14.0.sdk" "$THEOS/sdks/iPhoneOS14.0.sdk" || true

      # ------------------- Instagram IPA -------------------
      - name: Download & extract Instagram IPA
        shell: bash
        run: |
          wget -q "${{ inputs.decrypted_ipa_url }}" -O Instagram.ipa
          unzip -q Instagram.ipa -d tmp_ipa
          IG_VERSION=$(plutil -extract CFBundleShortVersionString raw tmp_ipa/Payload/Instagram.app/Info.plist)
          echo "IG_VERSION=$IG_VERSION" >> "$GITHUB_ENV"
          echo "Instagram v$IG_VERSION"

      # ------------------- Rocket.zip (robust) -------------------
      - name: Download & extract Rocket.zip (robust)
        shell: bash
        run: |
          set -euo pipefail

          ROCKET_INPUT="${{ inputs.rocket_zip_url }}"

          # Fix Dropbox: force dl=1
          if echo "$ROCKET_INPUT" | grep -qi "dropbox"; then
            if echo "$ROCKET_INPUT" | grep -q "dl="; then
              ROCKET_URL="$(echo "$ROCKET_INPUT" | sed -E 's/dl=[01]/dl=1/g')"
            else
              ROCKET_URL="${ROCKET_INPUT}&dl=1"
            fi
          else
            ROCKET_URL="$ROCKET_INPUT"
          fi

          echo "Downloading Rocket from: $ROCKET_URL"
          wget -q "$ROCKET_URL" -O rocket.zip

          mkdir -p rocket_tmp
          unzip -q rocket.zip -d rocket_tmp

          ROCKET_DYLIB=$(find rocket_tmp -type f -iname '*rocket*.dylib' | head -n1)
          if [ -z "$ROCKET_DYLIB" ]; then
            echo "ERROR: Rocket.dylib not found"
            find rocket_tmp -type f | head -20
            exit 1
          fi

          cp "$ROCKET_DYLIB" ./Rocket.dylib
          echo "Copied dylib: $ROCKET_DYLIB"

          ROCKET_BUNDLE=$(find rocket_tmp -type d -iname 'Rocket.bundle' | head -n1)
          if [ -n "$ROCKET_BUNDLE" ]; then
            mkdir -p Resources
            cp -R "$ROCKET_BUNDLE" Resources/Rocket.bundle
            echo "Copied bundle"
          else
            mkdir -p Resources
            echo "No bundle (OK)"
          fi

          rm -rf rocket_tmp rocket.zip

      # ------------------- Patch Rocket.dylib -------------------
      - name: Patch Rocket.dylib
        run: |
          printf '\x20\x00\x80\xd2\xc0\x03\x5f\xd6' | dd of=Rocket.dylib bs=1 seek=$((0x5E30)) conv=notrunc 2>/dev/null
          echo "Patched at 0x5E30"

      # ------------------- Layout -------------------
      - name: Prepare layout
        run: |
          mkdir -p layout/Applications/Instagram.app/Frameworks
          cp -R tmp_ipa/Payload/Instagram.app/* layout/Applications/Instagram.app/
          cp Rocket.dylib layout/Applications/Instagram.app/Frameworks/
          [ -d Resources/Rocket.bundle ] && cp -R Resources/Rocket.bundle layout/Applications/Instagram.app/ || true

      # ------------------- Makefile (critical: correct tabs) -------------------
      - name: Generate Makefile (jailed IPA)
        shell: bash
        run: |
          cat > Makefile <<'EOF'
include $(THEOS)/makefiles/common.mk

THEOS_PACKAGE_SCHEME = jailed
THEOS_PLATFORM_DEB_COMPRESSION = none

APPLICATION_NAME = Instagram
Instagram_BINARY = Instagram
Instagram_FRAMEWORKS = UIKit Foundation

ARCHS = arm64
TARGET = iphone:clang:latest:14.0
THEOS_PLATFORM_SDK_ROOT = $(THEOS_JAILED)/sdks

Instagram_INSTALL_PATH = /Applications
Hackogram_INJECT_DYLIBS = Rocket.dylib

include $(THEOS_MAKE_PATH)/aggregate.mk
include $(THEOS_MAKE_PATH)/application.mk

after-stage::
    $(ECHO_NOTHING)install_name_tool -change @rpath/Rocket.dylib @executable_path/../Frameworks/Rocket.dylib \
        $(THEOS_STAGING_DIR)/Applications/Instagram.app/Instagram$(ECHO_END)
    $(ECHO_NOTHING)ldid -S$(THEOS_STAGING_DIR)/Applications/Instagram.app/Instagram$(ECHO_END)

FINALPACKAGE = 1
EOF

          # Preserve tabs in after-stage:: block
          awk '
            /^after-stage::$/ { print; in_block=1; next }
            in_block && /^$/ { in_block=0 }
            in_block { print; next }
            /^\s/ { gsub(/^\s+/, "\t"); print; next }
            { print }
          ' Makefile > Makefile.tmp && mv Makefile.tmp Makefile

          echo "Makefile generated (correct tabs)"

      # ------------------- Build IPA -------------------
      - name: Build IPA
        shell: bash
        run: |
          echo "Building IPA (sign_ipa=${{ inputs.sign_ipa }})..."
          if [ "${{ inputs.sign_ipa }}" = "false" ]; then
            make clean package FINALPACKAGE=1 CODESIGN_IPA=0
          else
            make clean package FINALPACKAGE=1
          fi

      # ------------------- Rename & Upload -------------------
      - name: Rename IPA
        shell: bash
        run: |
          IPA=$(find packages -name "*.ipa" -type f | head -n1)
          [ -z "$IPA" ] && { echo "ERROR: IPA not found in packages/"; exit 1; }
          SUFFIX=$(if [ "${{ inputs.sign_ipa }}" = "false" ]; then echo "-unsigned"; else echo ""; fi)
          NEW_NAME="IGSideloadFix-Instagram-${{ env.IG_VERSION }}$SUFFIX.ipa"
          mv "$IPA" "$NEW_NAME"
          echo "Built: $NEW_NAME"

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: IGSideloadFix-Instagram-${{ env.IG_VERSION }}${{ inputs.sign_ipa == false && '-unsigned' || '' }}
          path: IGSideloadFix-Instagram-${{ env.IG_VERSION }}${{ inputs.sign_ipa == false && '-unsigned' || '' }}.ipa
          retention-days: 7
